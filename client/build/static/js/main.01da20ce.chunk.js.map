{"version":3,"sources":["App.tsx","serviceWorker.js","index.tsx"],"names":["App","state","physicians","this","fetchPhysicians","id","fetchAppointments","_this2","isoFetch","concat","then","res","json","calendar","setState","catch","err","_this3","_this4","_this$state","react","className","Container","fluid","map","doc","key","onClick","e","handlePhysicianClick","name","Table","striped","bordered","hover","appointments","appointment","order","time","kind","React","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAsGeA,6MAzFNC,MAAkB,CACvBC,WAAY,uFAIZC,KAAKC,+DAGsBC,GAC3BF,KAAKG,kBAAkBD,6CAGCA,GAAkB,IAAAE,EAAAJ,KAC1CK,IAAQ,0CAAAC,OAA2CJ,IAClDK,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GACLN,EAAKO,SAAS,CACZD,eAGHE,MAAM,SAAAC,GAAG,OAAIA,8CAGgB,IAAAC,EAAAd,KAC9BK,IAAS,wCACNE,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACR,GACLe,EAAKH,SAAS,CACZZ,iBAGHa,MAAM,SAAAC,GAAG,OAAIA,qCAGF,IAAAE,EAAAf,KAAAgB,EACmBhB,KAAKF,MAA9BC,EADMiB,EACNjB,WAAYW,EADNM,EACMN,SACpB,OACEO,EAAA,qBAAKC,UAAU,OACbD,EAAA,cAACE,EAAA,EAAD,CAAWC,OAAK,GACdH,EAAA,qBAAKC,UAAU,sBACbD,EAAA,qBAAKC,UAAU,8CACbD,EAAA,oBAAIC,UAAU,OAAd,cACAD,EAAA,oBAAIC,UAAU,YACXnB,GAAcA,EAAWsB,IAAI,SAACC,GAC7B,OACEL,EAAA,oBACEC,UAAU,qBACVK,IAAKD,EAAIpB,GACTsB,QAAS,SAACC,GAAuCV,EAAKW,qBAAqBJ,EAAIpB,MAE9EoB,EAAIK,UAMfV,EAAA,qBAAKC,UAAU,qCACbD,EAAA,cAACW,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3Bd,EAAA,2BACEA,EAAA,wBACEA,EAAA,6BACAA,EAAA,gCACAA,EAAA,gCACAA,EAAA,kCAGJA,EAAA,2BACGP,GAAYA,EAASsB,aAAaX,IAAI,SAACY,GACtC,OACEhB,EAAA,oBACEM,IAAKU,EAAYC,OAEjBjB,EAAA,wBAAKgB,EAAYC,OACjBjB,EAAA,wBAAKgB,EAAYN,MACjBV,EAAA,wBAAKgB,EAAYE,MACjBlB,EAAA,wBAAKgB,EAAYG,sBA7EvBC,mBCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,SACE1B,EAAA,cAAC2B,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.01da20ce.chunk.js","sourcesContent":["import * as React from 'react';\nimport './App.css';\nimport isoFetch from 'isomorphic-fetch';\nimport { Physician, Calendar } from '../../shared';\nimport { Table, Container } from 'react-bootstrap';\n\nexport interface AppState {\n  physicians: Physician[];\n  calendar?: Calendar;\n}\n\nclass App extends React.Component<{}, AppState> {\n\n  public state: AppState = {\n    physicians: []\n  };\n\n  public componentDidMount() {\n    this.fetchPhysicians();\n  }\n\n  private handlePhysicianClick(id: number) {\n    this.fetchAppointments(id);\n  }\n\n  private fetchAppointments(id: number): void {\n    isoFetch(`http://localhost:3000/api/appointments/${id}`)\n    .then(res => res.json())\n    .then((calendar: Calendar) => {\n      this.setState({\n        calendar\n      });\n    })\n    .catch(err => err);\n  }\n\n  private fetchPhysicians(): void {\n    isoFetch('http://localhost:3000/api/physicians')\n      .then(res => res.json())\n      .then((physicians: Physician[]) => {\n        this.setState({\n          physicians\n        });\n      })\n      .catch(err => err);\n  }\n\n  public render() {\n    const { physicians, calendar } = this.state;\n    return (\n      <div className=\"App\">\n        <Container fluid>\n          <div className=\"flex-xl-nowrap row\">\n            <div className=\"col-xl-2 col-md-3 col-12 p-0 App-sidePanel\">\n              <h3 className=\"p-2\">PHYSICIANS</h3>\n              <ul className=\"physList\">\n                {physicians && physicians.map((doc) => {\n                  return (\n                    <li \n                      className=\"physList-physician\"\n                      key={doc.id} \n                      onClick={(e: React.MouseEvent<HTMLElement>) => { this.handlePhysicianClick(doc.id) }}\n                    >\n                      {doc.name}\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n            <div className=\"col-xl-8 col-md-9 col-12 App-main\">\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th>#</th>\n                    <th>Name</th>\n                    <th>Time</th>\n                    <th>Kind</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {calendar && calendar.appointments.map((appointment) => {\n                    return (\n                      <tr \n                        key={appointment.order} \n                      >\n                        <td>{appointment.order}</td>\n                        <td>{appointment.name}</td>\n                        <td>{appointment.time}</td>\n                        <td>{appointment.kind}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </Table>\n            </div>\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}